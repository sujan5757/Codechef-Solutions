#include <stdio.h>
#include <string.h>


char* readstr(char* dst);
int readval();

char s[100005];

typedef struct node {
	char c;
	int neighbors[3];
}node;

node graph[10] = {
	{'A', {1, 4, 5}},
	{'B', {0, 2, 6}},
	{'C', {1, 3, 7}},
	{'D', {2, 4, 8}},
	{'E', {0, 3, 9}},

	{ 'A',{ 0, 7, 8} },
	{ 'B',{ 1, 8, 9} },
	{ 'C',{ 2, 5, 9} },
	{ 'D',{ 3, 5, 6} },
	{ 'E',{ 4, 6, 7} }
};

char stack[10000000];
int ns;
int solve() {
	int found;
	while (s[ns]) {
		int curr = stack[ns - 1];
		found = 0;
		for (int i = 0; !found && i < 3; i++) {
			int j = graph[curr].neighbors[i];
			found = (graph[j].c == s[ns]);
			if (found)
				stack[ns++] = j;
		}

		if (!found)
			return 0;
	}

	return 1;
}

int main() {
	int t;

	t = readval();

	while (t-- > 0) {
		char *pend = readstr(s);
		*pend = 0;

		int found = 0;
		for (int i = 0; !found && i < 10; i++) {
			if (graph[i].c == *s) {
				ns = 1;
				stack[0] = i;
				found = solve();
			}
		}

		if (!found) {
			puts("-1");
		}
		else {
			for (int i = 0; i < ns; i++)
				stack[i] += '0';
			stack[ns] = 0;
			puts(stack);
		}

	}

	return 0;
}

#define BUFSIZE 65536
#define SAFEMARGIN 15
char buf[BUFSIZE];
char *pbuf = buf;
char *pbufend = buf;

void loadbuf() {
	pbuf = buf;
	pbufend = buf + fread(buf, 1, BUFSIZE, stdin);
}

void skipsafe() {
	for (;;) {
		if (pbuf == pbufend) {
			loadbuf();
		}

		if (*pbuf >= '!' && *pbuf <= '~')
			return;

		pbuf++;
	}
}

int readval() {
	int n = 0;
	unsigned char c;

	skipsafe();

	for (;;) {
		if (pbuf == pbufend) {
			if (feof(stdin))
				break;

			loadbuf();
		}

		c = *pbuf;
		pbuf++;

		if (c < '0' || c > '9') {
			break;
		}

		n = 10 * n + c - '0';
	}

	return n;
}


char* readstr(char* dst) {
	unsigned char c;

	skipsafe();

	for (;;) {
		if (pbuf == pbufend) {
			if (feof(stdin))
				return dst;

			loadbuf();
		}


		c = *(pbuf++);
		if (c < 'A') {
			return dst;
		}

		*(dst++) = c;
	}

}
